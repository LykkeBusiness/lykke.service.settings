// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.SettingsServiceV2.Client.AutorestClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SettingsServiceV2API.
    /// </summary>
    public static partial class SettingsServiceV2APIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IKeyValueEntity> ApiApiOverrideGet(this ISettingsServiceV2API operations)
            {
                return operations.ApiApiOverrideGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IKeyValueEntity>> ApiApiOverrideGetAsync(this ISettingsServiceV2API operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiApiOverrideGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// </param>
            public static ApiOverrideModel ApiApiOverridePut(this ISettingsServiceV2API operations, KeyValueToUpdate entity = default(KeyValueToUpdate))
            {
                return operations.ApiApiOverridePutAsync(entity).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiOverrideModel> ApiApiOverridePutAsync(this ISettingsServiceV2API operations, KeyValueToUpdate entity = default(KeyValueToUpdate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiApiOverridePutWithHttpMessagesAsync(entity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IKeyValueEntity ApiApiOverrideByIdGet(this ISettingsServiceV2API operations, string id)
            {
                return operations.ApiApiOverrideByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IKeyValueEntity> ApiApiOverrideByIdGetAsync(this ISettingsServiceV2API operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiApiOverrideByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static bool? ApiApiOverrideByIdDelete(this ISettingsServiceV2API operations, string id)
            {
                return operations.ApiApiOverrideByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ApiApiOverrideByIdDeleteAsync(this ISettingsServiceV2API operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiApiOverrideByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> ApiApiOverrideCollectionKeysGet(this ISettingsServiceV2API operations)
            {
                return operations.ApiApiOverrideCollectionKeysGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ApiApiOverrideCollectionKeysGetAsync(this ISettingsServiceV2API operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiApiOverrideCollectionKeysGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> ApiApiOverrideBlobKeysGet(this ISettingsServiceV2API operations)
            {
                return operations.ApiApiOverrideBlobKeysGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ApiApiOverrideBlobKeysGetAsync(this ISettingsServiceV2API operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiApiOverrideBlobKeysGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IRepository> ApiApiRepositoryGet(this ISettingsServiceV2API operations)
            {
                return operations.ApiApiRepositoryGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IRepository>> ApiApiRepositoryGetAsync(this ISettingsServiceV2API operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiApiRepositoryGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repository'>
            /// </param>
            public static ApiRepositoryModel ApiApiRepositoryPut(this ISettingsServiceV2API operations, RepositoryEntity repository = default(RepositoryEntity))
            {
                return operations.ApiApiRepositoryPutAsync(repository).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repository'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiRepositoryModel> ApiApiRepositoryPutAsync(this ISettingsServiceV2API operations, RepositoryEntity repository = default(RepositoryEntity), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiApiRepositoryPutWithHttpMessagesAsync(repository, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repository'>
            /// </param>
            public static ApiRepositoryModel ApiApiRepositoryPost(this ISettingsServiceV2API operations, RepositoryEntity repository = default(RepositoryEntity))
            {
                return operations.ApiApiRepositoryPostAsync(repository).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repository'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiRepositoryModel> ApiApiRepositoryPostAsync(this ISettingsServiceV2API operations, RepositoryEntity repository = default(RepositoryEntity), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiApiRepositoryPostWithHttpMessagesAsync(repository, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IRepository ApiApiRepositoryByIdGet(this ISettingsServiceV2API operations, string id)
            {
                return operations.ApiApiRepositoryByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IRepository> ApiApiRepositoryByIdGetAsync(this ISettingsServiceV2API operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiApiRepositoryByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void Get(this ISettingsServiceV2API operations)
            {
                operations.GetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAsync(this ISettingsServiceV2API operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void HomeJsonGet(this ISettingsServiceV2API operations)
            {
                operations.HomeJsonGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HomeJsonGetAsync(this ISettingsServiceV2API operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HomeJsonGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='useManualSettings'>
            /// </param>
            /// <param name='repositoryId'>
            /// </param>
            /// <param name='json'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static void HomeUploadJsonPost(this ISettingsServiceV2API operations, bool useManualSettings, string repositoryId = default(string), string json = default(string), string userName = default(string))
            {
                operations.HomeUploadJsonPostAsync(useManualSettings, repositoryId, json, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='useManualSettings'>
            /// </param>
            /// <param name='repositoryId'>
            /// </param>
            /// <param name='json'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HomeUploadJsonPostAsync(this ISettingsServiceV2API operations, bool useManualSettings, string repositoryId = default(string), string json = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HomeUploadJsonPostWithHttpMessagesAsync(useManualSettings, repositoryId, json, userName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void HomeRepositoryGet(this ISettingsServiceV2API operations)
            {
                operations.HomeRepositoryGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HomeRepositoryGetAsync(this ISettingsServiceV2API operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HomeRepositoryGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repositoryId'>
            /// </param>
            public static void HomeRepositoryFileJsonPost(this ISettingsServiceV2API operations, string repositoryId = default(string))
            {
                operations.HomeRepositoryFileJsonPostAsync(repositoryId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repositoryId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HomeRepositoryFileJsonPostAsync(this ISettingsServiceV2API operations, string repositoryId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HomeRepositoryFileJsonPostWithHttpMessagesAsync(repositoryId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repositoryId'>
            /// </param>
            public static void HomeRepositoryFileJsonViewPost(this ISettingsServiceV2API operations, string repositoryId = default(string))
            {
                operations.HomeRepositoryFileJsonViewPostAsync(repositoryId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repositoryId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HomeRepositoryFileJsonViewPostAsync(this ISettingsServiceV2API operations, string repositoryId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HomeRepositoryFileJsonViewPostWithHttpMessagesAsync(repositoryId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repositoryName'>
            /// </param>
            /// <param name='rowKey'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            public static void HomeRepositoryFileByRepositoryNameByRowKeyByFileNameGet(this ISettingsServiceV2API operations, string repositoryName, string rowKey, string fileName)
            {
                operations.HomeRepositoryFileByRepositoryNameByRowKeyByFileNameGetAsync(repositoryName, rowKey, fileName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repositoryName'>
            /// </param>
            /// <param name='rowKey'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HomeRepositoryFileByRepositoryNameByRowKeyByFileNameGetAsync(this ISettingsServiceV2API operations, string repositoryName, string rowKey, string fileName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HomeRepositoryFileByRepositoryNameByRowKeyByFileNameGetWithHttpMessagesAsync(repositoryName, rowKey, fileName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// </param>
            public static void HomeConnectionUrlHistoryByPageGet(this ISettingsServiceV2API operations, int? page = default(int?))
            {
                operations.HomeConnectionUrlHistoryByPageGetAsync(page).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HomeConnectionUrlHistoryByPageGetAsync(this ISettingsServiceV2API operations, int? page = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HomeConnectionUrlHistoryByPageGetWithHttpMessagesAsync(page, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='useManualSettings'>
            /// </param>
            /// <param name='timestamp'>
            /// </param>
            /// <param name='lastModified'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='gitUrl'>
            /// </param>
            /// <param name='branch'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='connectionUrl'>
            /// </param>
            /// <param name='originalName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='partitionKey'>
            /// </param>
            /// <param name='rowKey'>
            /// </param>
            /// <param name='eTag'>
            /// </param>
            public static void HomeChangeRepositoryNamePost(this ISettingsServiceV2API operations, bool useManualSettings, System.DateTime timestamp, string lastModified = default(string), string name = default(string), string gitUrl = default(string), string branch = default(string), string fileName = default(string), string userName = default(string), string connectionUrl = default(string), string originalName = default(string), string version = default(string), string partitionKey = default(string), string rowKey = default(string), string eTag = default(string))
            {
                operations.HomeChangeRepositoryNamePostAsync(useManualSettings, timestamp, lastModified, name, gitUrl, branch, fileName, userName, connectionUrl, originalName, version, partitionKey, rowKey, eTag).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='useManualSettings'>
            /// </param>
            /// <param name='timestamp'>
            /// </param>
            /// <param name='lastModified'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='gitUrl'>
            /// </param>
            /// <param name='branch'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='connectionUrl'>
            /// </param>
            /// <param name='originalName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='partitionKey'>
            /// </param>
            /// <param name='rowKey'>
            /// </param>
            /// <param name='eTag'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HomeChangeRepositoryNamePostAsync(this ISettingsServiceV2API operations, bool useManualSettings, System.DateTime timestamp, string lastModified = default(string), string name = default(string), string gitUrl = default(string), string branch = default(string), string fileName = default(string), string userName = default(string), string connectionUrl = default(string), string originalName = default(string), string version = default(string), string partitionKey = default(string), string rowKey = default(string), string eTag = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HomeChangeRepositoryNamePostWithHttpMessagesAsync(useManualSettings, timestamp, lastModified, name, gitUrl, branch, fileName, userName, connectionUrl, originalName, version, partitionKey, rowKey, eTag, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='search'>
            /// </param>
            public static void HomeKeyValueGet(this ISettingsServiceV2API operations, string filter = default(string), string search = default(string))
            {
                operations.HomeKeyValueGetAsync(filter, search).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='search'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HomeKeyValueGetAsync(this ISettingsServiceV2API operations, string filter = default(string), string search = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HomeKeyValueGetWithHttpMessagesAsync(filter, search, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keyValueId'>
            /// </param>
            public static void HomeDeleteKeyValuePost(this ISettingsServiceV2API operations, string keyValueId = default(string))
            {
                operations.HomeDeleteKeyValuePostAsync(keyValueId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keyValueId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HomeDeleteKeyValuePostAsync(this ISettingsServiceV2API operations, string keyValueId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HomeDeleteKeyValuePostWithHttpMessagesAsync(keyValueId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isUsedInRepository'>
            /// </param>
            /// <param name='isJsonType'>
            /// </param>
            /// <param name='rowKey'>
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='eTag'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='isDuplicated'>
            /// </param>
            /// <param name='types'>
            /// </param>
            /// <param name='overrideParameter'>
            /// </param>
            /// <param name='forced'>
            /// </param>
            public static void HomeUploadKeyValuePost(this ISettingsServiceV2API operations, bool isUsedInRepository, bool isJsonType, string rowKey = default(string), string key = default(string), string eTag = default(string), string value = default(string), bool? isDuplicated = default(bool?), IList<string> types = default(IList<string>), IList<object> overrideParameter = default(IList<object>), bool? forced = default(bool?))
            {
                operations.HomeUploadKeyValuePostAsync(isUsedInRepository, isJsonType, rowKey, key, eTag, value, isDuplicated, types, overrideParameter, forced).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='isUsedInRepository'>
            /// </param>
            /// <param name='isJsonType'>
            /// </param>
            /// <param name='rowKey'>
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='eTag'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='isDuplicated'>
            /// </param>
            /// <param name='types'>
            /// </param>
            /// <param name='overrideParameter'>
            /// </param>
            /// <param name='forced'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HomeUploadKeyValuePostAsync(this ISettingsServiceV2API operations, bool isUsedInRepository, bool isJsonType, string rowKey = default(string), string key = default(string), string eTag = default(string), string value = default(string), bool? isDuplicated = default(bool?), IList<string> types = default(IList<string>), IList<object> overrideParameter = default(IList<object>), bool? forced = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HomeUploadKeyValuePostWithHttpMessagesAsync(isUsedInRepository, isJsonType, rowKey, key, eTag, value, isDuplicated, types, overrideParameter, forced, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void HomeLockTimePost(this ISettingsServiceV2API operations)
            {
                operations.HomeLockTimePostAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HomeLockTimePostAsync(this ISettingsServiceV2API operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HomeLockTimePostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keyValueId'>
            /// </param>
            public static void HomeGetKvHistoryPost(this ISettingsServiceV2API operations, string keyValueId = default(string))
            {
                operations.HomeGetKvHistoryPostAsync(keyValueId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keyValueId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HomeGetKvHistoryPostAsync(this ISettingsServiceV2API operations, string keyValueId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HomeGetKvHistoryPostWithHttpMessagesAsync(keyValueId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void HomeSetLockTimePost(this ISettingsServiceV2API operations)
            {
                operations.HomeSetLockTimePostAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task HomeSetLockTimePostAsync(this ISettingsServiceV2API operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.HomeSetLockTimePostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void NetworksGet(this ISettingsServiceV2API operations)
            {
                operations.NetworksGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task NetworksGetAsync(this ISettingsServiceV2API operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.NetworksGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void NetworksPost(this ISettingsServiceV2API operations)
            {
                operations.NetworksPostAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task NetworksPostAsync(this ISettingsServiceV2API operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.NetworksPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='ip'>
            /// </param>
            /// <param name='ips'>
            /// </param>
            public static void NetworksAddPost(this ISettingsServiceV2API operations, string id = default(string), string name = default(string), string ip = default(string), IList<string> ips = default(IList<string>))
            {
                operations.NetworksAddPostAsync(id, name, ip, ips).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='ip'>
            /// </param>
            /// <param name='ips'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task NetworksAddPostAsync(this ISettingsServiceV2API operations, string id = default(string), string name = default(string), string ip = default(string), IList<string> ips = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.NetworksAddPostWithHttpMessagesAsync(id, name, ip, ips, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='ip'>
            /// </param>
            /// <param name='ips'>
            /// </param>
            public static void NetworksUpdatePost(this ISettingsServiceV2API operations, string id = default(string), string name = default(string), string ip = default(string), IList<string> ips = default(IList<string>))
            {
                operations.NetworksUpdatePostAsync(id, name, ip, ips).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='ip'>
            /// </param>
            /// <param name='ips'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task NetworksUpdatePostAsync(this ISettingsServiceV2API operations, string id = default(string), string name = default(string), string ip = default(string), IList<string> ips = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.NetworksUpdatePostWithHttpMessagesAsync(id, name, ip, ips, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void NetworksDeletePost(this ISettingsServiceV2API operations, string id = default(string))
            {
                operations.NetworksDeletePostAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task NetworksDeletePostAsync(this ISettingsServiceV2API operations, string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.NetworksDeletePostWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            public static void OverridePost(this ISettingsServiceV2API operations, string key = default(string))
            {
                operations.OverridePostAsync(key).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task OverridePostAsync(this ISettingsServiceV2API operations, string key = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.OverridePostWithHttpMessagesAsync(key, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='networkId'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void OverrideAddPost(this ISettingsServiceV2API operations, string key = default(string), string networkId = default(string), string value = default(string))
            {
                operations.OverrideAddPostAsync(key, networkId, value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='networkId'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task OverrideAddPostAsync(this ISettingsServiceV2API operations, string key = default(string), string networkId = default(string), string value = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.OverrideAddPostWithHttpMessagesAsync(key, networkId, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='networkId'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void OverrideUpdatePost(this ISettingsServiceV2API operations, string key = default(string), string networkId = default(string), string value = default(string))
            {
                operations.OverrideUpdatePostAsync(key, networkId, value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='networkId'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task OverrideUpdatePostAsync(this ISettingsServiceV2API operations, string key = default(string), string networkId = default(string), string value = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.OverrideUpdatePostWithHttpMessagesAsync(key, networkId, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='networkId'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void OverrideDeletePost(this ISettingsServiceV2API operations, string key = default(string), string networkId = default(string), string value = default(string))
            {
                operations.OverrideDeletePostAsync(key, networkId, value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// </param>
            /// <param name='networkId'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task OverrideDeletePostAsync(this ISettingsServiceV2API operations, string key = default(string), string networkId = default(string), string value = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.OverrideDeletePostWithHttpMessagesAsync(key, networkId, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
