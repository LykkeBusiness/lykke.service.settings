// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.SettingsServiceV2.Client.AutorestClient.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ApiRepositoryModel
    {
        /// <summary>
        /// Initializes a new instance of the ApiRepositoryModel class.
        /// </summary>
        public ApiRepositoryModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApiRepositoryModel class.
        /// </summary>
        /// <param name="status">Possible values include: 'Ok',
        /// 'JsonFormarIncorrrect', 'OutOfDate', 'InternalError', 'NotFound',
        /// 'HasDuplicated', 'AlreadyExists', 'InvalidInput'</param>
        public ApiRepositoryModel(UpdateSettingsStatus status, IList<IRepository> repositories = default(IList<IRepository>))
        {
            Status = status;
            Repositories = repositories;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'Ok', 'JsonFormarIncorrrect',
        /// 'OutOfDate', 'InternalError', 'NotFound', 'HasDuplicated',
        /// 'AlreadyExists', 'InvalidInput'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public UpdateSettingsStatus Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "repositories")]
        public IList<IRepository> Repositories { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Repositories != null)
            {
                foreach (var element in Repositories)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
