// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.SettingsServiceV2.Client.AutorestClient.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class RepositoryEntity
    {
        /// <summary>
        /// Initializes a new instance of the RepositoryEntity class.
        /// </summary>
        public RepositoryEntity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RepositoryEntity class.
        /// </summary>
        public RepositoryEntity(bool useManualSettings, System.DateTime timestamp, string lastModified = default(string), string name = default(string), string gitUrl = default(string), string branch = default(string), string fileName = default(string), string userName = default(string), string connectionUrl = default(string), string originalName = default(string), string version = default(string), string partitionKey = default(string), string rowKey = default(string), string eTag = default(string))
        {
            LastModified = lastModified;
            Name = name;
            GitUrl = gitUrl;
            Branch = branch;
            FileName = fileName;
            UserName = userName;
            ConnectionUrl = connectionUrl;
            OriginalName = originalName;
            UseManualSettings = useManualSettings;
            Version = version;
            PartitionKey = partitionKey;
            RowKey = rowKey;
            Timestamp = timestamp;
            ETag = eTag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModified")]
        public string LastModified { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gitUrl")]
        public string GitUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "branch")]
        public string Branch { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fileName")]
        public string FileName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userName")]
        public string UserName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectionUrl")]
        public string ConnectionUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "originalName")]
        public string OriginalName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "useManualSettings")]
        public bool UseManualSettings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "partitionKey")]
        public string PartitionKey { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rowKey")]
        public string RowKey { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public System.DateTime Timestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "eTag")]
        public string ETag { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
