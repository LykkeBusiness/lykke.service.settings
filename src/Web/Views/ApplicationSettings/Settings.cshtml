@using Newtonsoft.Json
@using Core.Extensions
@model Web.Models.ApplicationSettingsModel

@{
    ViewBag.Title = "Application Settings";
}

<h2>Application Settings</h2>
<br /><br />

<div class="editItems">

</div>


@section Scripts
    {
    <script type="text/javascript">
        $(function () {
            $.populateSettings = function(json) {
                var data = eval('(' + json + ')');
                var html = '<table class="table table-stripped table-bordered"><tr><th>Name</th><th>Value</th></tr>';

                var dataKeys = Object.keys(data);
                var restrictedKeys = ["PartitionKey", "RowKey", "Timestamp", "ETag"];

                dataKeys.forEach(key => {
                    if (restrictedKeys.findIndex(x=> x == key) == -1) {
                        html += '<tr>' +
                            '<td>' + key + '</td>';
                        if (data[key] === null || typeof data[key] === 'undefined') {
                            html += '<td><span class="viewMode valueSpan" style="height:20px; width:200px; border:1px solid grey; border-radius:5px;"></span>';
                        } else {
                            html += '<td><span class="viewMode valueSpan">' + data[key] + '</span>';
                        }
                        html += '<input type="text" class="form-control editMode valueInput" id="' + key + '" value="' + data[key] + '" /></td></tr>';
                    }
                });
                    

                html += '</table>';
                var parent = $('.editItems');
                parent.empty();
                parent.append($(html));

                $('.valueSpan').click(function () {
                    $(this).attr('data-old', $(this).text());
                    $(this).hide();
                    var valueInput = $(this).siblings('input');

                    $(valueInput).val($(this).text());
                    // multiply by 2 to ensure the cursor always ends up at the end;
                    // opera sometimes sees a carriage return as 2 characters.
                    var strLength = $(valueInput).val().length * 2;
                    $(valueInput).show().focus();
                    // setSelectionRange
                    $(valueInput)[0].setSelectionRange(strLength, strLength);
                });

                $('.valueInput').blur(function () {
                    var valueInput = $(this);
                    var valueSpan = $(valueInput).siblings('span');
                    var value = $(valueInput).val();
                    var oldValue = $(valueSpan).attr('data-old');

                    if (oldValue === value) {
                        $(this).hide();
                        $(valueSpan).show();
                        return;
                    }

                    var settingsId = '@Model.RowKey';
                    var type = $(valueInput).attr('id');

                    if (confirm('The "' + settingsId + '" will be updated.')) {
                        var url = '@Url.Action("SaveSettings")';
                        var settingsToEdit = {
                            'model': {
                                'rowKey': settingsId,
                            }
                        };

                        settingsToEdit['model'][type] = value;

                        $.post(url,
                            settingsToEdit,
                            function (data) {
                                $(valueInput).hide();
                                $(valueSpan).text(value);
                                $(valueSpan).show();

                                if (data.result == @((int) UpdateSettingsStatus.Ok)) {
                                    $.populateSettings(data.json);
                                } else if (data.result === @((int)UpdateSettingsStatus.NotFound)) {
                                    $.showMessage('error', 'Repository not found', []);
                                } else if (data.result === @((int)UpdateSettingsStatus.InternalError)) {
                                    $.showMessage('error', 'Internal error', []);
                                }
                            });
                    } else {
                        $(valueSpan).text(oldValue);
                    }
                });
            }

            $.populateSettings('@Html.Raw(JsonConvert.SerializeObject(Model).Replace("'", "\\'").Replace("\"", "\\\""))');
        });
    </script>
}
